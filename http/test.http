### 회원가입 (시연 전에)
POST http://localhost:8080/users
Content-Type: application/json

{
  "accountId": "test111111",
  "password": "1q2w3e4r!@#$",
  "name": "test",
  "email": "test@gmail.com"
}

### 로그인 (시연 전에)
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "test111111",
  "password": "1q2w3e4r!@#$"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

### 이메일 인증번호 전송 (시연 전에)
POST http://localhost:8080/email
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "email" : "test@gmail.com"
}

### 인증번호 확인 (시연 전에)
POST http://localhost:8080/email/verify
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "email" : "test@gmail.com",
  "authNum": "eSG3Vfwk"
}

### 로그아웃 (시연 전에)
POST http://localhost:8080/users/logout
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

> {%
    client.global.clear("accessToken");
    client.global.clear("refreshToken");
%}

### 1. 회원가입
POST http://localhost:8080/users
Content-Type: application/json

{
  "accountId": "user111111",
  "password": "1q2w3e4r!@#$",
  "name": "user1",
  "email": "ydh001027@gmail.com"
}

### 2. 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "user111111",
  "password": "1q2w3e4r!@#$"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

### 3. 이메일 인증번호 전송
POST http://localhost:8080/email
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "email" : "ydh001027@gmail.com"
}

### 4. 인증번호 확인
POST http://localhost:8080/email/verify
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "email" : "ydh001027@gmail.com",
  "authNum": "6G1Nz8yo"
}

### 5. 로그아웃
POST http://localhost:8080/users/logout
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

> {%
    client.global.clear("accessToken");
    client.global.clear("refreshToken");
%}

### 6. 회원 프로필 조회
GET http://localhost:8080/users
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

### 7. 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "user111111",
  "password": "1q2w3e4r!@#$"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

### 8. 회원 프로필 조회
GET http://localhost:8080/users
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

### 9. 회원 프로필 수정
PUT http://localhost:8080/users
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "name": "유동현2",
  "intro": "한 줄 소개입니다."
}

### 10. 회원 프로필 조회
GET http://localhost:8080/users
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

### 11. 회원 프로필 이미지 업로드
POST http://localhost:8080/users/profile
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="file"; filename="uploadImage.png";
Content-Type: image/png

< file/image1.png

### 12. 회원 비밀번호 변경
PATCH http://localhost:8080/users/password
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "currentPassword": "1q2w3e4r!@#$",
  "newPassword": "1qaz2wsx!@"
}

### 13. 게시글 생성 1
POST http://localhost:8080/posts
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="title";

title

--boundary
Content-Disposition: form-data; name="description";

description

--boundary
Content-Disposition: form-data; name="files"; filename="image1.png";
Content-Type: image/png

< file/image1.png

--boundary
Content-Disposition: form-data; name="files"; filename="gif.gif";
Content-Type: image/gif

< file/gif.gif

--boundary
Content-Disposition: form-data; name="files"; filename="video.mp4";
Content-Type: video/mp4

< file/video.mp4

### 14. 게시글 생성 2
POST http://localhost:8080/posts
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="title";

title

--boundary
Content-Disposition: form-data; name="description";

description

--boundary
Content-Disposition: form-data; name="files"; filename="image1.png";
Content-Type: image/png

< file/image1.png

### 15. 게시글 목록 조회
GET http://localhost:8080/posts?page=1

### 16. 기간별 게시글 목록 조회
GET http://localhost:8080/posts?page=1&searchStartDate=20240605&searchEndDate=20240610

### 17. 게시글 수정
PUT http://localhost:8080/posts/1
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="title";

updateTitle

--boundary
Content-Disposition: form-data; name="description";

updateDescription

--boundary
Content-Disposition: form-data; name="files"; filename="image2.png";
Content-Type: image/png

< file/image2.jpeg

### 18. 게시글 삭제
DELETE http://localhost:8080/posts/1
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

### 19. 게시글 목록 조회
GET http://localhost:8080/posts?page=1

### 20. 댓글 등록 1
POST http://localhost:8080/posts/2/comments
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "description": "test description1"
}

### 21. 댓글 등록 2
POST http://localhost:8080/posts/2/comments
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "description": "test description2"
}

### 22. 댓글 목록 조회
GET http://localhost:8080/posts/2/comments

### 23. 댓글 수정
PUT http://localhost:8080/posts/2/comments/1
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "description": "update description"
}

### 24. 댓글 삭제
DELETE http://localhost:8080/posts/2/comments/1
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

### 25. 댓글 목록 조회
GET http://localhost:8080/posts/2/comments

### 26. 좋아요 등록(뉴스피드)
POST http://localhost:8080/likes
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "contentId" : 2,
  "contentType":"NEWSFEED"
}

### 27. 좋아요 등록(댓글)
POST http://localhost:8080/likes
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "contentId" : 2,
  "contentType":"COMMENT"
}

### 28. 로그아웃
POST http://localhost:8080/users/logout
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

> {%
    client.global.clear("accessToken");
    client.global.clear("refreshToken");
%}

### 29. 로그인 (다른 회원)
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "test111111",
  "password": "1q2w3e4r!@#$"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

### 30. 좋아요 등록(뉴스피드)
POST http://localhost:8080/likes
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "contentId" : 2,
  "contentType":"NEWSFEED"
}

### 31. 좋아요 등록(댓글)
POST http://localhost:8080/likes
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "contentId" : 2,
  "contentType":"COMMENT"
}

### 32. 좋아요 조회 (뉴스피드)
GET http://localhost:8080/likes/2/NEWSFEED
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 33. 좋아요 조회 (댓글)
GET http://localhost:8080/likes/2/COMMENT
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 34. 좋아요 삭제 (뉴스피드)
DELETE http://localhost:8080/likes/1
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 35. 좋아요 삭제 (댓글)
DELETE http://localhost:8080/likes/2
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 36. 좋아요 삭제 확인 (뉴스피드)
GET http://localhost:8080/likes/2/NEWSFEED
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 37. 좋아요 삭제 확인 (댓글)
GET http://localhost:8080/likes/2/COMMENT
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

### 38. 로그아웃
POST http://localhost:8080/users/logout
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}

> {%
    client.global.clear("accessToken");
    client.global.clear("refreshToken");
%}

### 39. 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "user111111",
  "password": "1qaz2wsx!@"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

### 40. 회원 상태 비활성화
PATCH http://localhost:8080/users
accessToken: {{accessToken}}
refreshToken: {{refreshToken}}
Content-Type: application/json

{
  "password": "1qaz2wsx!@"
}

### 41. 게시글 목록 조회 (탈퇴한 회원 게시글은 조회 안됨)
GET http://localhost:8080/posts?page=1

### 42. 탈퇴한 회원 댓글 목록 조회 (탈퇴한 회원 댓글은 조회 안됨)
GET http://localhost:8080/posts/2/comments

### 43. 탈퇴한 회원 로그인
POST http://localhost:8080/users/login
Content-Type: application/json

{
  "accountId": "user111111",
  "password": "1qaz2wsx!@"
}

> {%
    client.log(response.headers.valueOf("accessToken"));
    client.log(response.headers.valueOf("refreshToken"));
    client.global.set("accessToken", response.headers.valueOf("accessToken"));
    client.global.set("refreshToken", response.headers.valueOf("refreshToken"));
%}

